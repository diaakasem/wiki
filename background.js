// Generated by CoffeeScript 1.6.3
(function() {
  var Manager, Readability, Scheduler, Twitter, Wikipedia, lang_selector;

  String.prototype.has = function(text) {
    return this.indexOf(text) >= 0;
  };

  lang_selector = {
    fr: function(html) {
      return $("div#mf-lumieresur p a", html);
    },
    en: function(html) {
      return $("div#mp-tfa b>a", html);
    },
    de: function(html) {
      return $("div#mf-tfa b>a", html);
    }
  };

  Wikipedia = (function() {
    function Wikipedia() {}

    Wikipedia.prototype.getWikiLink = function(lang, handler) {
      var article_url;
      if (lang != null) {
        lang = "en";
      }
      article_url = "http://" + lang + ".wikipedia.org";
      return $.get(article_url, function(html) {
        var links;
        links = lang_selector[lang](html);
        if (links.length) {
          return handler(article_url + $(links[0]).attr("href"), $(links[0]).text());
        }
      });
    };

    return Wikipedia;

  })();

  Readability = (function() {
    function Readability() {
      this.link = "http://www.readability.com";
      this.shortner = "http://rdd.me";
      this.api = "/api/shortener/v1/urls";
    }

    /*
    Creates a readability shortened link from the passed link
    @param url The url to shorten
    */


    Readability.prototype.open = function(url, handler) {
      return $.ajax({
        url: this.link + this.api,
        type: "POST",
        contentType: "application/x-www-form-urlencoded",
        accepts: "text/plain",
        data: {
          url: url
        }
      }).done(function(resObj) {
        var resUrl;
        resUrl = resObj.meta.rdd_url;
        if (resUrl.has(this.shortner)) {
          resUrl = resUrl.replace(this.shortner, this.link + "/articles");
        }
        resUrl = resUrl.replace("http:", "https:");
        return handler(resUrl);
      });
    };

    return Readability;

  })();

  Twitter = (function() {
    function Twitter() {
      this.twitterUrl = "https://twitter.com/home?status=";
      this.messages = {
        "ar.": " [ AR ] %23diknows %23Wikipedia",
        "fr.": " [ FR ] %23diknows %23Wikipedia",
        "en.": " [ EN ] %23diknows %23Wikipedia",
        "nl.": " [ NL ] %23diknows %23Wikipedia"
      };
    }

    Twitter.prototype.tweet = function(oldlink, link, title) {
      var keys, text;
      keys = Object.keys(this.messages).filter(function(el) {
        return oldlink.has(el);
      });
      if (keys) {
        text = link + " " + title + " " + this.messages[keys[0]];
        return chrome.tabs.create({
          url: this.twitterUrl + text
        });
      }
    };

    return Twitter;

  })();

  Manager = (function() {
    function Manager() {
      this.wiki = new Wikipedia();
      this.read = new Readability();
      this.twitter = new Twitter();
    }

    Manager.prototype.openLink = function(link, title) {
      var that;
      that = this;
      return this.read.open(link, function(url) {
        chrome.tabs.create({
          url: url
        });
        return that.twitter.tweet(link, url, title);
      });
    };

    Manager.prototype.run = function() {
      var lang, _results;
      _results = [];
      for (lang in lang_selector) {
        _results.push(this.wiki.getWikiLink(lang, openLink));
      }
      return _results;
    };

    return Manager;

  })();

  Scheduler = (function() {
    function Scheduler() {
      this.schedule = null;
      this.timeInterval = 58999;
      this.scheduled = [];
    }

    Scheduler.prototype.check = function(cronPart, value) {
      return cronPart === "*" || value === parseInt(cronPart, 10);
    };

    Scheduler.prototype.isExecutable = function(cronParts) {
      var execute, now;
      now = new Date();
      execute = check(cronParts[0], now.getMinutes()) && check(cronParts[1], now.getHours()) && check(cronParts[2], now.getDate()) && check(cronParts[3], now.getMonth() + 1) && check(cronParts[4], now.getDay());
      return execute;
    };

    Scheduler.prototype.checkSchedule = function() {
      var i, _results;
      i = 0;
      _results = [];
      while (i < scheduled.length) {
        if (isExecutable(scheduled[i].cron)) {
          scheduled[i].handler();
        }
        _results.push(i++);
      }
      return _results;
    };

    Scheduler.prototype.addSchedule = function(cronString, properties, handler) {
      var cronParts, index;
      cronParts = cronString.split(" ");
      if (cronParts.length !== 5) {
        throw new Error("Cron string must contain [ Minutes Hours DayOfMonth Month DayOfWeek(0/sun -> 6/sat) ] ");
      }
      index = scheduled.length;
      scheduled[index] = {
        cron: cronParts,
        handler: handler
      };
      scheduled[index] = $.extend({}, scheduled[index], properties);
      return this;
    };

    Scheduler.prototype.start = function() {
      var schedule;
      return schedule = window.setInterval(checkSchedule, timeInterval);
    };

    Scheduler.prototype.stop = function() {
      return window.clearInterval(schedule);
    };

    return Scheduler;

  })();

  $(function() {
    var cron, scheduler;
    scheduler = new Scheduler();
    cron = "30 12 * * *";
    return scheduler.addSchedule(cron, {}, Manager).start();
  });

}).call(this);

/*
//@ sourceMappingURL=background.map
*/
